//~~~~ Settings for Gradle
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }

}

apply plugin: 'java'
apply plugin: 'application'

group 'ro.ghionoiu'

//noinspection GroovyUnusedAssignment
targetCompatibility = JavaVersion.VERSION_1_8
//noinspection GroovyUnusedAssignment
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
}

dependencies {
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.8.0.201706111038-r'
    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.8.0.201706111038-r'
    compile 'com.googlecode.java-diff-utils:diffutils:1.3.0'
    compile 'com.google.code.gson:gson:2.8.0'

    compile 'commons-io:commons-io:2.5'
    compile 'com.beust:jcommander:1.72'
    compile 'org.apache.commons:commons-compress:1.3'

    compile 'org.slf4j:slf4j-api:1.7.25'
    compileOnly 'org.projectlombok:lombok:1.16.16'

    testCompile 'com.tngtech.java:junit-dataprovider:1.9.3'
    testCompile 'commons-codec:commons-codec:1.10'
    testCompile('junit:junit:4.12'){
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompileOnly 'org.projectlombok:lombok:1.16.16'
}

// ~~~~~ Packaging

apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = "tdl.record.sourcecode.App"
jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
}

// ~~~~~ Gather coverage

apply plugin: "jacoco"

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

//~~~~~ Release management


/**
 * Prerequisites
 *    - Create package in Bintray
 *
 * Now you can use regular maven upload to push files to you package.
 * The version will be created automatically
 *
 * To push to Maven Central use Bintray sync features:
 *    - Created request for jcenter ( if missing )
 *    - Manually sync the two repos
 *
 * To publish new version use the Bintray UI:
 *    - publish current artifacts
 *    - sync with Maven Central
 */
apply plugin: "ch.netzwerg.release"
apply plugin: 'maven'

release {
    dependsOn build // 'distZip' could e.g be used in combination with the 'application' plugin
    push = false // 'true' would e.g. be useful when triggering the release task on a CI server
    versionSuffix = '-SNAPSHOT' // '.DEV' or '' (empty) could be useful alternatives
    tagPrefix = 'v' // 'r' or '' (empty) could be useful alternatives
}

private static String readSystem(String property) {
    System.getenv(property) != null  ? System.getenv(property) : "unset"
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: Javadoc) {
    classifier = 'javadoc'
    from Javadoc.destinationDir
}

// Add the sourceJars to non-extractor modules
artifacts {
    archives sourceJar
    archives javadocJar
}

uploadArchives {
    repositories.mavenDeployer {
        name = 'bintray-julianghionoiu-dev-sourcecode-record'
        repository(id: 'bintray-julianghionoiu-dev-sourcecode-record',
                url: 'https://api.bintray.com/maven/julianghionoiu/maven/dev-sourcecode-record') {
            authentication(userName: readSystem("BINTRAY_USER"), password: readSystem("BINTRAY_KEY"))
        }

        pom.project {
            name 'Programming Session Recorder'
            description 'Library designed for recording source code from programming sessions.'
            url 'https://github.com/julianghionoiu/dev-sourcecode-record'

            developers {
                developer {
                    name 'Iulian (Julian) Ghionoiu'
                    email 'iulian.ghionoiu@gmail.com'
                    organization 'Iulian Ghionoiu'
                    organizationUrl 'https://github.com/julianghionoiu'
                }
            }

            scm {
                connection 'scm:git:git@github.com:julianghionoiu/dev-sourcecode-record.git'
                developerConnection 'scm:git:git@github.com:julianghionoiu/dev-sourcecode-record.git'
                url 'git@github.com:julianghionoiu/dev-sourcecode-record.git'
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
        }
    }
}